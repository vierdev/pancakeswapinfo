/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PeripheryImmutableStateTest,
  PeripheryImmutableStateTestInterface,
} from "../../../contracts/test/PeripheryImmutableStateTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_deployer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516101873803806101878339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660805292821b831660a052901b1660c05260805160601c60a05160601c60c05160601c60f561009260003980607e52508060a252508060c6525060f56000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80634aa4a4fc146041578063c45a0155146070578063d5f39488146076575b600080fd5b6047607c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b604760a0565b604760c4565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008156fea164736f6c6343000706000a";

type PeripheryImmutableStateTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PeripheryImmutableStateTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PeripheryImmutableStateTest__factory extends ContractFactory {
  constructor(...args: PeripheryImmutableStateTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _deployer: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PeripheryImmutableStateTest> {
    return super.deploy(
      _deployer,
      _factory,
      _WETH9,
      overrides || {}
    ) as Promise<PeripheryImmutableStateTest>;
  }
  override getDeployTransaction(
    _deployer: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _deployer,
      _factory,
      _WETH9,
      overrides || {}
    );
  }
  override attach(address: string): PeripheryImmutableStateTest {
    return super.attach(address) as PeripheryImmutableStateTest;
  }
  override connect(signer: Signer): PeripheryImmutableStateTest__factory {
    return super.connect(signer) as PeripheryImmutableStateTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PeripheryImmutableStateTestInterface {
    return new utils.Interface(_abi) as PeripheryImmutableStateTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PeripheryImmutableStateTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PeripheryImmutableStateTest;
  }
}
