/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPancakeStableSwapLPFactory,
  IPancakeStableSwapLPFactoryInterface,
} from "../../../contracts/interfaces/IPancakeStableSwapLPFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenC",
        type: "address",
      },
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "createSwapLP",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPancakeStableSwapLPFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IPancakeStableSwapLPFactoryInterface {
    return new Interface(_abi) as IPancakeStableSwapLPFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPancakeStableSwapLPFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IPancakeStableSwapLPFactory;
  }
}
