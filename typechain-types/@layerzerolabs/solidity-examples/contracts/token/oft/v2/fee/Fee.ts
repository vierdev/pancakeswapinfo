/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../../common";

export interface FeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BP_DENOMINATOR"
      | "chainIdToFeeBps"
      | "defaultFeeBp"
      | "feeOwner"
      | "owner"
      | "quoteOFTFee"
      | "renounceOwnership"
      | "setDefaultFeeBp"
      | "setFeeBp"
      | "setFeeOwner"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "SetDefaultFeeBp"
      | "SetFeeBp"
      | "SetFeeOwner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BP_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeBp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteOFTFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeBp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBp",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BP_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteOFTFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDefaultFeeBpEvent {
  export type InputTuple = [feeBp: BigNumberish];
  export type OutputTuple = [feeBp: bigint];
  export interface OutputObject {
    feeBp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeBpEvent {
  export type InputTuple = [
    dstchainId: BigNumberish,
    enabled: boolean,
    feeBp: BigNumberish
  ];
  export type OutputTuple = [
    dstchainId: bigint,
    enabled: boolean,
    feeBp: bigint
  ];
  export interface OutputObject {
    dstchainId: bigint;
    enabled: boolean;
    feeBp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeOwnerEvent {
  export type InputTuple = [feeOwner: AddressLike];
  export type OutputTuple = [feeOwner: string];
  export interface OutputObject {
    feeOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fee extends BaseContract {
  connect(runner?: ContractRunner | null): Fee;
  waitForDeployment(): Promise<this>;

  interface: FeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BP_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  chainIdToFeeBps: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { feeBP: bigint; enabled: boolean }],
    "view"
  >;

  defaultFeeBp: TypedContractMethod<[], [bigint], "view">;

  feeOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  quoteOFTFee: TypedContractMethod<
    [_dstChainId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDefaultFeeBp: TypedContractMethod<
    [_feeBp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeBp: TypedContractMethod<
    [_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeOwner: TypedContractMethod<
    [_feeOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BP_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainIdToFeeBps"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { feeBP: bigint; enabled: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultFeeBp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteOFTFee"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultFeeBp"
  ): TypedContractMethod<[_feeBp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeBp"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeOwner"
  ): TypedContractMethod<[_feeOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetDefaultFeeBp"
  ): TypedContractEvent<
    SetDefaultFeeBpEvent.InputTuple,
    SetDefaultFeeBpEvent.OutputTuple,
    SetDefaultFeeBpEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeBp"
  ): TypedContractEvent<
    SetFeeBpEvent.InputTuple,
    SetFeeBpEvent.OutputTuple,
    SetFeeBpEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeOwner"
  ): TypedContractEvent<
    SetFeeOwnerEvent.InputTuple,
    SetFeeOwnerEvent.OutputTuple,
    SetFeeOwnerEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetDefaultFeeBp(uint16)": TypedContractEvent<
      SetDefaultFeeBpEvent.InputTuple,
      SetDefaultFeeBpEvent.OutputTuple,
      SetDefaultFeeBpEvent.OutputObject
    >;
    SetDefaultFeeBp: TypedContractEvent<
      SetDefaultFeeBpEvent.InputTuple,
      SetDefaultFeeBpEvent.OutputTuple,
      SetDefaultFeeBpEvent.OutputObject
    >;

    "SetFeeBp(uint16,bool,uint16)": TypedContractEvent<
      SetFeeBpEvent.InputTuple,
      SetFeeBpEvent.OutputTuple,
      SetFeeBpEvent.OutputObject
    >;
    SetFeeBp: TypedContractEvent<
      SetFeeBpEvent.InputTuple,
      SetFeeBpEvent.OutputTuple,
      SetFeeBpEvent.OutputObject
    >;

    "SetFeeOwner(address)": TypedContractEvent<
      SetFeeOwnerEvent.InputTuple,
      SetFeeOwnerEvent.OutputTuple,
      SetFeeOwnerEvent.OutputObject
    >;
    SetFeeOwner: TypedContractEvent<
      SetFeeOwnerEvent.InputTuple,
      SetFeeOwnerEvent.OutputTuple,
      SetFeeOwnerEvent.OutputObject
    >;
  };
}
