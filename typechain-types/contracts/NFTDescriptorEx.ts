/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace NFTDescriptorEx {
  export type ConstructTokenURIParamsStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    quoteTokenAddress: PromiseOrValue<string>;
    baseTokenAddress: PromiseOrValue<string>;
    quoteTokenSymbol: PromiseOrValue<string>;
    baseTokenSymbol: PromiseOrValue<string>;
    quoteTokenDecimals: PromiseOrValue<BigNumberish>;
    baseTokenDecimals: PromiseOrValue<BigNumberish>;
    flipRatio: PromiseOrValue<boolean>;
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
    tickCurrent: PromiseOrValue<BigNumberish>;
    tickSpacing: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    poolAddress: PromiseOrValue<string>;
  };

  export type ConstructTokenURIParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    number,
    number,
    boolean,
    number,
    number,
    number,
    number,
    number,
    string
  ] & {
    tokenId: BigNumber;
    quoteTokenAddress: string;
    baseTokenAddress: string;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    quoteTokenDecimals: number;
    baseTokenDecimals: number;
    flipRatio: boolean;
    tickLower: number;
    tickUpper: number;
    tickCurrent: number;
    tickSpacing: number;
    fee: number;
    poolAddress: string;
  };
}

export interface NFTDescriptorExInterface extends utils.Interface {
  functions: {
    "constructTokenURI((uint256,address,address,string,string,uint8,uint8,bool,int24,int24,int24,int24,uint24,address))": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "toggleSwitchAndUpdateNFTDomain(bool,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "constructTokenURI"
      | "owner"
      | "setOwner"
      | "toggleSwitchAndUpdateNFTDomain"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "constructTokenURI",
    values: [NFTDescriptorEx.ConstructTokenURIParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSwitchAndUpdateNFTDomain",
    values: [PromiseOrValue<boolean>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "constructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSwitchAndUpdateNFTDomain",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "ToggleSwitchAndUpdateNFTDomain(address,bool,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ToggleSwitchAndUpdateNFTDomain"
  ): EventFragment;
}

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface ToggleSwitchAndUpdateNFTDomainEventObject {
  sender: string;
  switchToHttpLink: boolean;
  NFTDomain: string;
}
export type ToggleSwitchAndUpdateNFTDomainEvent = TypedEvent<
  [string, boolean, string],
  ToggleSwitchAndUpdateNFTDomainEventObject
>;

export type ToggleSwitchAndUpdateNFTDomainEventFilter =
  TypedEventFilter<ToggleSwitchAndUpdateNFTDomainEvent>;

export interface NFTDescriptorEx extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTDescriptorExInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    constructTokenURI(
      params: NFTDescriptorEx.ConstructTokenURIParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleSwitchAndUpdateNFTDomain(
      _switchToHttpLink: PromiseOrValue<boolean>,
      _NFTDomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  constructTokenURI(
    params: NFTDescriptorEx.ConstructTokenURIParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleSwitchAndUpdateNFTDomain(
    _switchToHttpLink: PromiseOrValue<boolean>,
    _NFTDomain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    constructTokenURI(
      params: NFTDescriptorEx.ConstructTokenURIParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleSwitchAndUpdateNFTDomain(
      _switchToHttpLink: PromiseOrValue<boolean>,
      _NFTDomain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerChanged(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerChangedEventFilter;
    OwnerChanged(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerChangedEventFilter;

    "ToggleSwitchAndUpdateNFTDomain(address,bool,string)"(
      sender?: PromiseOrValue<string> | null,
      switchToHttpLink?: null,
      NFTDomain?: null
    ): ToggleSwitchAndUpdateNFTDomainEventFilter;
    ToggleSwitchAndUpdateNFTDomain(
      sender?: PromiseOrValue<string> | null,
      switchToHttpLink?: null,
      NFTDomain?: null
    ): ToggleSwitchAndUpdateNFTDomainEventFilter;
  };

  estimateGas: {
    constructTokenURI(
      params: NFTDescriptorEx.ConstructTokenURIParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleSwitchAndUpdateNFTDomain(
      _switchToHttpLink: PromiseOrValue<boolean>,
      _NFTDomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    constructTokenURI(
      params: NFTDescriptorEx.ConstructTokenURIParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleSwitchAndUpdateNFTDomain(
      _switchToHttpLink: PromiseOrValue<boolean>,
      _NFTDomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
