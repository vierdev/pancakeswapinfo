/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PancakeStableSwapFactory {
  export type StableSwapPairInfoStruct = {
    swapContract: AddressLike;
    token0: AddressLike;
    token1: AddressLike;
    LPContract: AddressLike;
  };

  export type StableSwapPairInfoStructOutput = [
    swapContract: string,
    token0: string,
    token1: string,
    LPContract: string
  ] & {
    swapContract: string;
    token0: string;
    token1: string;
    LPContract: string;
  };

  export type StableSwapThreePoolPairInfoStruct = {
    swapContract: AddressLike;
    token0: AddressLike;
    token1: AddressLike;
    token2: AddressLike;
    LPContract: AddressLike;
  };

  export type StableSwapThreePoolPairInfoStructOutput = [
    swapContract: string,
    token0: string,
    token1: string,
    token2: string,
    LPContract: string
  ] & {
    swapContract: string;
    token0: string;
    token1: string;
    token2: string;
    LPContract: string;
  };
}

export interface PancakeStableSwapFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LPFactory"
      | "SwapThreePoolDeployer"
      | "SwapTwoPoolDeployer"
      | "addPairInfo"
      | "createSwapPair"
      | "createThreePoolPair"
      | "getPairInfo"
      | "getThreePoolPairInfo"
      | "owner"
      | "pairLength"
      | "renounceOwnership"
      | "stableSwapPairInfo"
      | "swapPairContract"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewStableSwapPair" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "LPFactory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SwapThreePoolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SwapTwoPoolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPairInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSwapPair",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createThreePoolPair",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreePoolPairInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableSwapPairInfo",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPairContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "LPFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SwapThreePoolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapTwoPoolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSwapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createThreePoolPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreePoolPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableSwapPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPairContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace NewStableSwapPairEvent {
  export type InputTuple = [
    swapContract: AddressLike,
    tokenA: AddressLike,
    tokenB: AddressLike,
    tokenC: AddressLike,
    LP: AddressLike
  ];
  export type OutputTuple = [
    swapContract: string,
    tokenA: string,
    tokenB: string,
    tokenC: string,
    LP: string
  ];
  export interface OutputObject {
    swapContract: string;
    tokenA: string;
    tokenB: string;
    tokenC: string;
    LP: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PancakeStableSwapFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PancakeStableSwapFactory;
  waitForDeployment(): Promise<this>;

  interface: PancakeStableSwapFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LPFactory: TypedContractMethod<[], [string], "view">;

  SwapThreePoolDeployer: TypedContractMethod<[], [string], "view">;

  SwapTwoPoolDeployer: TypedContractMethod<[], [string], "view">;

  addPairInfo: TypedContractMethod<
    [_swapContract: AddressLike],
    [void],
    "nonpayable"
  >;

  createSwapPair: TypedContractMethod<
    [
      _tokenA: AddressLike,
      _tokenB: AddressLike,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin_fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createThreePoolPair: TypedContractMethod<
    [
      _tokenA: AddressLike,
      _tokenB: AddressLike,
      _tokenC: AddressLike,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin_fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getPairInfo: TypedContractMethod<
    [_tokenA: AddressLike, _tokenB: AddressLike],
    [PancakeStableSwapFactory.StableSwapPairInfoStructOutput],
    "view"
  >;

  getThreePoolPairInfo: TypedContractMethod<
    [_tokenA: AddressLike, _tokenB: AddressLike],
    [PancakeStableSwapFactory.StableSwapThreePoolPairInfoStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pairLength: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stableSwapPairInfo: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [
      [string, string, string, string, string] & {
        swapContract: string;
        token0: string;
        token1: string;
        token2: string;
        LPContract: string;
      }
    ],
    "view"
  >;

  swapPairContract: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LPFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SwapThreePoolDeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SwapTwoPoolDeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addPairInfo"
  ): TypedContractMethod<[_swapContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSwapPair"
  ): TypedContractMethod<
    [
      _tokenA: AddressLike,
      _tokenB: AddressLike,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin_fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createThreePoolPair"
  ): TypedContractMethod<
    [
      _tokenA: AddressLike,
      _tokenB: AddressLike,
      _tokenC: AddressLike,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin_fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPairInfo"
  ): TypedContractMethod<
    [_tokenA: AddressLike, _tokenB: AddressLike],
    [PancakeStableSwapFactory.StableSwapPairInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThreePoolPairInfo"
  ): TypedContractMethod<
    [_tokenA: AddressLike, _tokenB: AddressLike],
    [PancakeStableSwapFactory.StableSwapThreePoolPairInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stableSwapPairInfo"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [
      [string, string, string, string, string] & {
        swapContract: string;
        token0: string;
        token1: string;
        token2: string;
        LPContract: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapPairContract"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "NewStableSwapPair"
  ): TypedContractEvent<
    NewStableSwapPairEvent.InputTuple,
    NewStableSwapPairEvent.OutputTuple,
    NewStableSwapPairEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "NewStableSwapPair(address,address,address,address,address)": TypedContractEvent<
      NewStableSwapPairEvent.InputTuple,
      NewStableSwapPairEvent.OutputTuple,
      NewStableSwapPairEvent.OutputObject
    >;
    NewStableSwapPair: TypedContractEvent<
      NewStableSwapPairEvent.InputTuple,
      NewStableSwapPairEvent.OutputTuple,
      NewStableSwapPairEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
