/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PancakeStableSwapTwoPoolInfoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "N_COINS"
      | "PRECISION"
      | "PRECISION_MUL"
      | "RATES"
      | "_xp_mem"
      | "balances"
      | "calc_coins_amount"
      | "get_D_mem"
      | "get_add_liquidity_fee"
      | "get_add_liquidity_mint_amount"
      | "get_dx"
      | "get_exchange_fee"
      | "get_remove_liquidity_imbalance_fee"
      | "get_remove_liquidity_one_coin_fee"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "N_COINS", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRECISION_MUL",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "RATES", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "_xp_mem",
    values: [AddressLike, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_coins_amount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_D_mem",
    values: [AddressLike, [BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_add_liquidity_fee",
    values: [AddressLike, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_add_liquidity_mint_amount",
    values: [AddressLike, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dx",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_exchange_fee",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_remove_liquidity_imbalance_fee",
    values: [AddressLike, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_remove_liquidity_one_coin_fee",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "N_COINS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_MUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RATES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_xp_mem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_coins_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_D_mem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_add_liquidity_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_add_liquidity_mint_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_dx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_exchange_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_remove_liquidity_imbalance_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_remove_liquidity_one_coin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export interface PancakeStableSwapTwoPoolInfo extends BaseContract {
  connect(runner?: ContractRunner | null): PancakeStableSwapTwoPoolInfo;
  waitForDeployment(): Promise<this>;

  interface: PancakeStableSwapTwoPoolInfoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  N_COINS: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  PRECISION_MUL: TypedContractMethod<
    [_swap: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  RATES: TypedContractMethod<[_swap: AddressLike], [[bigint, bigint]], "view">;

  _xp_mem: TypedContractMethod<
    [_swap: AddressLike, _balances: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "view"
  >;

  balances: TypedContractMethod<
    [_swap: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  calc_coins_amount: TypedContractMethod<
    [_swap: AddressLike, _amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  get_D_mem: TypedContractMethod<
    [
      _swap: AddressLike,
      _balances: [BigNumberish, BigNumberish],
      amp: BigNumberish
    ],
    [bigint],
    "view"
  >;

  get_add_liquidity_fee: TypedContractMethod<
    [_swap: AddressLike, amounts: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "view"
  >;

  get_add_liquidity_mint_amount: TypedContractMethod<
    [_swap: AddressLike, amounts: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  get_dx: TypedContractMethod<
    [
      _swap: AddressLike,
      i: BigNumberish,
      j: BigNumberish,
      dy: BigNumberish,
      max_dx: BigNumberish
    ],
    [bigint],
    "view"
  >;

  get_exchange_fee: TypedContractMethod<
    [_swap: AddressLike, i: BigNumberish, j: BigNumberish, dx: BigNumberish],
    [[bigint, bigint] & { exFee: bigint; exAdminFee: bigint }],
    "view"
  >;

  get_remove_liquidity_imbalance_fee: TypedContractMethod<
    [_swap: AddressLike, amounts: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "view"
  >;

  get_remove_liquidity_one_coin_fee: TypedContractMethod<
    [_swap: AddressLike, _token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;

  token: TypedContractMethod<[_swap: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "N_COINS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION_MUL"
  ): TypedContractMethod<[_swap: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "RATES"
  ): TypedContractMethod<[_swap: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "_xp_mem"
  ): TypedContractMethod<
    [_swap: AddressLike, _balances: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[_swap: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "calc_coins_amount"
  ): TypedContractMethod<
    [_swap: AddressLike, _amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_D_mem"
  ): TypedContractMethod<
    [
      _swap: AddressLike,
      _balances: [BigNumberish, BigNumberish],
      amp: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_add_liquidity_fee"
  ): TypedContractMethod<
    [_swap: AddressLike, amounts: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_add_liquidity_mint_amount"
  ): TypedContractMethod<
    [_swap: AddressLike, amounts: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_dx"
  ): TypedContractMethod<
    [
      _swap: AddressLike,
      i: BigNumberish,
      j: BigNumberish,
      dy: BigNumberish,
      max_dx: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_exchange_fee"
  ): TypedContractMethod<
    [_swap: AddressLike, i: BigNumberish, j: BigNumberish, dx: BigNumberish],
    [[bigint, bigint] & { exFee: bigint; exAdminFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_remove_liquidity_imbalance_fee"
  ): TypedContractMethod<
    [_swap: AddressLike, amounts: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_remove_liquidity_one_coin_fee"
  ): TypedContractMethod<
    [_swap: AddressLike, _token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[_swap: AddressLike], [string], "view">;

  filters: {};
}
