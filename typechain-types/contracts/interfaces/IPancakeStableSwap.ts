/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPancakeStableSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "A"
      | "N_COINS"
      | "PRECISION_MUL"
      | "RATES"
      | "admin_fee"
      | "balances"
      | "calc_withdraw_one_coin"
      | "coins"
      | "fee"
      | "get_D_mem"
      | "get_y"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "N_COINS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRECISION_MUL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "RATES", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_D_mem",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_y",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "N_COINS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_MUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RATES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_D_mem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export interface IPancakeStableSwap extends BaseContract {
  connect(runner?: ContractRunner | null): IPancakeStableSwap;
  waitForDeployment(): Promise<this>;

  interface: IPancakeStableSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  A: TypedContractMethod<[], [bigint], "view">;

  N_COINS: TypedContractMethod<[], [bigint], "view">;

  PRECISION_MUL: TypedContractMethod<[i: BigNumberish], [bigint], "view">;

  RATES: TypedContractMethod<[i: BigNumberish], [bigint], "view">;

  admin_fee: TypedContractMethod<[], [bigint], "view">;

  balances: TypedContractMethod<[i: BigNumberish], [bigint], "view">;

  calc_withdraw_one_coin: TypedContractMethod<
    [_token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;

  coins: TypedContractMethod<[i: BigNumberish], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  get_D_mem: TypedContractMethod<
    [_balances: [BigNumberish, BigNumberish], amp: BigNumberish],
    [bigint],
    "view"
  >;

  get_y: TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      x: BigNumberish,
      xp_: [BigNumberish, BigNumberish]
    ],
    [bigint],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "A"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "N_COINS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION_MUL"
  ): TypedContractMethod<[i: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "RATES"
  ): TypedContractMethod<[i: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[i: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calc_withdraw_one_coin"
  ): TypedContractMethod<
    [_token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "coins"
  ): TypedContractMethod<[i: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_D_mem"
  ): TypedContractMethod<
    [_balances: [BigNumberish, BigNumberish], amp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_y"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      x: BigNumberish,
      xp_: [BigNumberish, BigNumberish]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
