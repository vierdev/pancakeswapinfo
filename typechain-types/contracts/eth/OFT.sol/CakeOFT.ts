/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICommonOFT {
  export type LzCallParamsStruct = {
    refundAddress: AddressLike;
    zroPaymentAddress: AddressLike;
    adapterParams: BytesLike;
  };

  export type LzCallParamsStructOutput = [
    refundAddress: string,
    zroPaymentAddress: string,
    adapterParams: string
  ] & {
    refundAddress: string;
    zroPaymentAddress: string;
    adapterParams: string;
  };
}

export interface CakeOFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BP_DENOMINATOR"
      | "NO_EXTRA_GAS"
      | "PT_SEND"
      | "PT_SEND_AND_CALL"
      | "allowance"
      | "amountsForCall"
      | "approve"
      | "balanceOf"
      | "callOnOFTReceived"
      | "chainIdToFeeBps"
      | "chainIdToInboundCap"
      | "chainIdToLastReceivedTimestamp"
      | "chainIdToLastSentTimestamp"
      | "chainIdToOutboundCap"
      | "chainIdToReceivedTokenAmount"
      | "chainIdToSentTokenAmount"
      | "circulatingSupply"
      | "decimals"
      | "decreaseAllowance"
      | "defaultFeeBp"
      | "estimateSendAndCallFee"
      | "estimateSendFee"
      | "failedMessages"
      | "feeOwner"
      | "forceResumeReceive"
      | "getConfig"
      | "getTrustedRemoteAddress"
      | "increaseAllowance"
      | "isTrustedRemote"
      | "lzEndpoint"
      | "lzReceive"
      | "minDstGasLookup"
      | "name"
      | "nonblockingLzReceive"
      | "owner"
      | "pause"
      | "paused"
      | "precrime"
      | "quoteOFTFee"
      | "renounceOwnership"
      | "retryMessage"
      | "sendAndCall"
      | "sendFrom"
      | "setConfig"
      | "setDefaultFeeBp"
      | "setFeeBp"
      | "setFeeOwner"
      | "setInboundCap"
      | "setMinDstGas"
      | "setOutboundCap"
      | "setPrecrime"
      | "setReceiveVersion"
      | "setSendVersion"
      | "setTrustedRemote"
      | "setTrustedRemoteAddress"
      | "setUseCustomAdapterParams"
      | "setWhitelist"
      | "sharedDecimals"
      | "supportsInterface"
      | "symbol"
      | "token"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "trustedRemoteLookup"
      | "unpause"
      | "useCustomAdapterParams"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CallOFTReceivedSuccess"
      | "DropFailedMessage"
      | "FallbackWithdraw"
      | "MessageFailed"
      | "NonContractAddress"
      | "OwnershipTransferred"
      | "Paused"
      | "ReceiveFromChain"
      | "RetryMessageSuccess"
      | "SendToChain"
      | "SetDefaultFeeBp"
      | "SetFeeBp"
      | "SetFeeOwner"
      | "SetInboundCap"
      | "SetMinDstGas"
      | "SetOperator"
      | "SetOutboundCap"
      | "SetPrecrime"
      | "SetTrustedRemote"
      | "SetTrustedRemoteAddress"
      | "SetUseCustomAdapterParams"
      | "SetWhitelist"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BP_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_EXTRA_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PT_SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PT_SEND_AND_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "amountsForCall",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callOnOFTReceived",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToInboundCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToLastReceivedTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToLastSentTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToOutboundCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToReceivedTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToSentTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeBp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSendAndCallFee",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [BigNumberish, BytesLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessages",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRemoteAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDstGasLookup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonblockingLzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteOFTFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendAndCall",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      ICommonOFT.LzCallParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFrom",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      ICommonOFT.LzCallParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeBp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBp",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInboundCap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDstGas",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutboundCap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrecrime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseCustomAdapterParams",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedRemoteLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useCustomAdapterParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BP_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NO_EXTRA_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PT_SEND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PT_SEND_AND_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountsForCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callOnOFTReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToInboundCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToLastReceivedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToLastSentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToOutboundCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToReceivedTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToSentTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendAndCallFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDstGasLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonblockingLzReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteOFTFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInboundCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDstGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOutboundCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrecrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseCustomAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedRemoteLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useCustomAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallOFTReceivedSuccessEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _hash: BytesLike
  ];
  export type OutputTuple = [
    _srcChainId: bigint,
    _srcAddress: string,
    _nonce: bigint,
    _hash: string
  ];
  export interface OutputObject {
    _srcChainId: bigint;
    _srcAddress: string;
    _nonce: bigint;
    _hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DropFailedMessageEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackWithdrawEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageFailedEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _payload: BytesLike,
    _reason: BytesLike
  ];
  export type OutputTuple = [
    _srcChainId: bigint,
    _srcAddress: string,
    _nonce: bigint,
    _payload: string,
    _reason: string
  ];
  export interface OutputObject {
    _srcChainId: bigint;
    _srcAddress: string;
    _nonce: bigint;
    _payload: string;
    _reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonContractAddressEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveFromChainEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _to: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [_srcChainId: bigint, _to: string, _amount: bigint];
  export interface OutputObject {
    _srcChainId: bigint;
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RetryMessageSuccessEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _payloadHash: BytesLike
  ];
  export type OutputTuple = [
    _srcChainId: bigint,
    _srcAddress: string,
    _nonce: bigint,
    _payloadHash: string
  ];
  export interface OutputObject {
    _srcChainId: bigint;
    _srcAddress: string;
    _nonce: bigint;
    _payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendToChainEvent {
  export type InputTuple = [
    _dstChainId: BigNumberish,
    _from: AddressLike,
    _toAddress: BytesLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _dstChainId: bigint,
    _from: string,
    _toAddress: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _dstChainId: bigint;
    _from: string;
    _toAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDefaultFeeBpEvent {
  export type InputTuple = [feeBp: BigNumberish];
  export type OutputTuple = [feeBp: bigint];
  export interface OutputObject {
    feeBp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeBpEvent {
  export type InputTuple = [
    dstchainId: BigNumberish,
    enabled: boolean,
    feeBp: BigNumberish
  ];
  export type OutputTuple = [
    dstchainId: bigint,
    enabled: boolean,
    feeBp: bigint
  ];
  export interface OutputObject {
    dstchainId: bigint;
    enabled: boolean;
    feeBp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeOwnerEvent {
  export type InputTuple = [feeOwner: AddressLike];
  export type OutputTuple = [feeOwner: string];
  export interface OutputObject {
    feeOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetInboundCapEvent {
  export type InputTuple = [chainId: BigNumberish, cap: BigNumberish];
  export type OutputTuple = [chainId: bigint, cap: bigint];
  export interface OutputObject {
    chainId: bigint;
    cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinDstGasEvent {
  export type InputTuple = [
    _dstChainId: BigNumberish,
    _type: BigNumberish,
    _minDstGas: BigNumberish
  ];
  export type OutputTuple = [
    _dstChainId: bigint,
    _type: bigint,
    _minDstGas: bigint
  ];
  export interface OutputObject {
    _dstChainId: bigint;
    _type: bigint;
    _minDstGas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOperatorEvent {
  export type InputTuple = [newOperator: AddressLike];
  export type OutputTuple = [newOperator: string];
  export interface OutputObject {
    newOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOutboundCapEvent {
  export type InputTuple = [chainId: BigNumberish, cap: BigNumberish];
  export type OutputTuple = [chainId: bigint, cap: bigint];
  export interface OutputObject {
    chainId: bigint;
    cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPrecrimeEvent {
  export type InputTuple = [precrime: AddressLike];
  export type OutputTuple = [precrime: string];
  export interface OutputObject {
    precrime: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteEvent {
  export type InputTuple = [_remoteChainId: BigNumberish, _path: BytesLike];
  export type OutputTuple = [_remoteChainId: bigint, _path: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _path: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteAddressEvent {
  export type InputTuple = [
    _remoteChainId: BigNumberish,
    _remoteAddress: BytesLike
  ];
  export type OutputTuple = [_remoteChainId: bigint, _remoteAddress: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUseCustomAdapterParamsEvent {
  export type InputTuple = [_useCustomAdapterParams: boolean];
  export type OutputTuple = [_useCustomAdapterParams: boolean];
  export interface OutputObject {
    _useCustomAdapterParams: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWhitelistEvent {
  export type InputTuple = [addr: AddressLike, isWhitelist: boolean];
  export type OutputTuple = [addr: string, isWhitelist: boolean];
  export interface OutputObject {
    addr: string;
    isWhitelist: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CakeOFT extends BaseContract {
  connect(runner?: ContractRunner | null): CakeOFT;
  waitForDeployment(): Promise<this>;

  interface: CakeOFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BP_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  NO_EXTRA_GAS: TypedContractMethod<[], [bigint], "view">;

  PT_SEND: TypedContractMethod<[], [bigint], "view">;

  PT_SEND_AND_CALL: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  amountsForCall: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [[bigint, boolean] & { amount: bigint; credited: boolean }],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  callOnOFTReceived: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _from: BytesLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _payload: BytesLike,
      _gasForCall: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  chainIdToFeeBps: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { feeBP: bigint; enabled: boolean }],
    "view"
  >;

  chainIdToInboundCap: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  chainIdToLastReceivedTimestamp: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  chainIdToLastSentTimestamp: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  chainIdToOutboundCap: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  chainIdToReceivedTokenAmount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  chainIdToSentTokenAmount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  circulatingSupply: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  defaultFeeBp: TypedContractMethod<[], [bigint], "view">;

  estimateSendAndCallFee: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _payload: BytesLike,
      _dstGasForCall: BigNumberish,
      _useZro: boolean,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  estimateSendFee: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _useZro: boolean,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  failedMessages: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [string],
    "view"
  >;

  feeOwner: TypedContractMethod<[], [string], "view">;

  forceResumeReceive: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  getConfig: TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      arg2: AddressLike,
      _configType: BigNumberish
    ],
    [string],
    "view"
  >;

  getTrustedRemoteAddress: TypedContractMethod<
    [_remoteChainId: BigNumberish],
    [string],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isTrustedRemote: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  minDstGasLookup: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonblockingLzReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  precrime: TypedContractMethod<[], [string], "view">;

  quoteOFTFee: TypedContractMethod<
    [_dstChainId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retryMessage: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;

  sendAndCall: TypedContractMethod<
    [
      _from: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      _payload: BytesLike,
      _dstGasForCall: BigNumberish,
      _callParams: ICommonOFT.LzCallParamsStruct
    ],
    [void],
    "payable"
  >;

  sendFrom: TypedContractMethod<
    [
      _from: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      _callParams: ICommonOFT.LzCallParamsStruct
    ],
    [void],
    "payable"
  >;

  setConfig: TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setDefaultFeeBp: TypedContractMethod<
    [_feeBp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeBp: TypedContractMethod<
    [_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeOwner: TypedContractMethod<
    [_feeOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setInboundCap: TypedContractMethod<
    [chainId: BigNumberish, cap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDstGas: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _packetType: BigNumberish,
      _minGas: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setOutboundCap: TypedContractMethod<
    [chainId: BigNumberish, cap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPrecrime: TypedContractMethod<
    [_precrime: AddressLike],
    [void],
    "nonpayable"
  >;

  setReceiveVersion: TypedContractMethod<
    [_version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSendVersion: TypedContractMethod<
    [_version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedRemote: TypedContractMethod<
    [_srcChainId: BigNumberish, _path: BytesLike],
    [void],
    "nonpayable"
  >;

  setTrustedRemoteAddress: TypedContractMethod<
    [_remoteChainId: BigNumberish, _remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  setUseCustomAdapterParams: TypedContractMethod<
    [_useCustomAdapterParams: boolean],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [addr: AddressLike, isWhitelist: boolean],
    [void],
    "nonpayable"
  >;

  sharedDecimals: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedRemoteLookup: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  useCustomAdapterParams: TypedContractMethod<[], [boolean], "view">;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BP_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NO_EXTRA_GAS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PT_SEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PT_SEND_AND_CALL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "amountsForCall"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [[bigint, boolean] & { amount: bigint; credited: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "callOnOFTReceived"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _from: BytesLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _payload: BytesLike,
      _gasForCall: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chainIdToFeeBps"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { feeBP: bigint; enabled: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "chainIdToInboundCap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainIdToLastReceivedTimestamp"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainIdToLastSentTimestamp"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainIdToOutboundCap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainIdToReceivedTokenAmount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainIdToSentTokenAmount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "circulatingSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultFeeBp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateSendAndCallFee"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _payload: BytesLike,
      _dstGasForCall: BigNumberish,
      _useZro: boolean,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateSendFee"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _useZro: boolean,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "failedMessages"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "forceResumeReceive"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      arg2: AddressLike,
      _configType: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustedRemoteAddress"
  ): TypedContractMethod<[_remoteChainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrustedRemote"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minDstGasLookup"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonblockingLzReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "precrime"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteOFTFee"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retryMessage"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendAndCall"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      _payload: BytesLike,
      _dstGasForCall: BigNumberish,
      _callParams: ICommonOFT.LzCallParamsStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendFrom"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _dstChainId: BigNumberish,
      _toAddress: BytesLike,
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      _callParams: ICommonOFT.LzCallParamsStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultFeeBp"
  ): TypedContractMethod<[_feeBp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeBp"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeOwner"
  ): TypedContractMethod<[_feeOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInboundCap"
  ): TypedContractMethod<
    [chainId: BigNumberish, cap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinDstGas"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _packetType: BigNumberish,
      _minGas: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOutboundCap"
  ): TypedContractMethod<
    [chainId: BigNumberish, cap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrecrime"
  ): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReceiveVersion"
  ): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSendVersion"
  ): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedRemote"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _path: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedRemoteAddress"
  ): TypedContractMethod<
    [_remoteChainId: BigNumberish, _remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUseCustomAdapterParams"
  ): TypedContractMethod<
    [_useCustomAdapterParams: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [addr: AddressLike, isWhitelist: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sharedDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedRemoteLookup"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useCustomAdapterParams"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CallOFTReceivedSuccess"
  ): TypedContractEvent<
    CallOFTReceivedSuccessEvent.InputTuple,
    CallOFTReceivedSuccessEvent.OutputTuple,
    CallOFTReceivedSuccessEvent.OutputObject
  >;
  getEvent(
    key: "DropFailedMessage"
  ): TypedContractEvent<
    DropFailedMessageEvent.InputTuple,
    DropFailedMessageEvent.OutputTuple,
    DropFailedMessageEvent.OutputObject
  >;
  getEvent(
    key: "FallbackWithdraw"
  ): TypedContractEvent<
    FallbackWithdrawEvent.InputTuple,
    FallbackWithdrawEvent.OutputTuple,
    FallbackWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "MessageFailed"
  ): TypedContractEvent<
    MessageFailedEvent.InputTuple,
    MessageFailedEvent.OutputTuple,
    MessageFailedEvent.OutputObject
  >;
  getEvent(
    key: "NonContractAddress"
  ): TypedContractEvent<
    NonContractAddressEvent.InputTuple,
    NonContractAddressEvent.OutputTuple,
    NonContractAddressEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveFromChain"
  ): TypedContractEvent<
    ReceiveFromChainEvent.InputTuple,
    ReceiveFromChainEvent.OutputTuple,
    ReceiveFromChainEvent.OutputObject
  >;
  getEvent(
    key: "RetryMessageSuccess"
  ): TypedContractEvent<
    RetryMessageSuccessEvent.InputTuple,
    RetryMessageSuccessEvent.OutputTuple,
    RetryMessageSuccessEvent.OutputObject
  >;
  getEvent(
    key: "SendToChain"
  ): TypedContractEvent<
    SendToChainEvent.InputTuple,
    SendToChainEvent.OutputTuple,
    SendToChainEvent.OutputObject
  >;
  getEvent(
    key: "SetDefaultFeeBp"
  ): TypedContractEvent<
    SetDefaultFeeBpEvent.InputTuple,
    SetDefaultFeeBpEvent.OutputTuple,
    SetDefaultFeeBpEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeBp"
  ): TypedContractEvent<
    SetFeeBpEvent.InputTuple,
    SetFeeBpEvent.OutputTuple,
    SetFeeBpEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeOwner"
  ): TypedContractEvent<
    SetFeeOwnerEvent.InputTuple,
    SetFeeOwnerEvent.OutputTuple,
    SetFeeOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetInboundCap"
  ): TypedContractEvent<
    SetInboundCapEvent.InputTuple,
    SetInboundCapEvent.OutputTuple,
    SetInboundCapEvent.OutputObject
  >;
  getEvent(
    key: "SetMinDstGas"
  ): TypedContractEvent<
    SetMinDstGasEvent.InputTuple,
    SetMinDstGasEvent.OutputTuple,
    SetMinDstGasEvent.OutputObject
  >;
  getEvent(
    key: "SetOperator"
  ): TypedContractEvent<
    SetOperatorEvent.InputTuple,
    SetOperatorEvent.OutputTuple,
    SetOperatorEvent.OutputObject
  >;
  getEvent(
    key: "SetOutboundCap"
  ): TypedContractEvent<
    SetOutboundCapEvent.InputTuple,
    SetOutboundCapEvent.OutputTuple,
    SetOutboundCapEvent.OutputObject
  >;
  getEvent(
    key: "SetPrecrime"
  ): TypedContractEvent<
    SetPrecrimeEvent.InputTuple,
    SetPrecrimeEvent.OutputTuple,
    SetPrecrimeEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemote"
  ): TypedContractEvent<
    SetTrustedRemoteEvent.InputTuple,
    SetTrustedRemoteEvent.OutputTuple,
    SetTrustedRemoteEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemoteAddress"
  ): TypedContractEvent<
    SetTrustedRemoteAddressEvent.InputTuple,
    SetTrustedRemoteAddressEvent.OutputTuple,
    SetTrustedRemoteAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetUseCustomAdapterParams"
  ): TypedContractEvent<
    SetUseCustomAdapterParamsEvent.InputTuple,
    SetUseCustomAdapterParamsEvent.OutputTuple,
    SetUseCustomAdapterParamsEvent.OutputObject
  >;
  getEvent(
    key: "SetWhitelist"
  ): TypedContractEvent<
    SetWhitelistEvent.InputTuple,
    SetWhitelistEvent.OutputTuple,
    SetWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CallOFTReceivedSuccess(uint16,bytes,uint64,bytes32)": TypedContractEvent<
      CallOFTReceivedSuccessEvent.InputTuple,
      CallOFTReceivedSuccessEvent.OutputTuple,
      CallOFTReceivedSuccessEvent.OutputObject
    >;
    CallOFTReceivedSuccess: TypedContractEvent<
      CallOFTReceivedSuccessEvent.InputTuple,
      CallOFTReceivedSuccessEvent.OutputTuple,
      CallOFTReceivedSuccessEvent.OutputObject
    >;

    "DropFailedMessage(uint16,bytes,uint64)": TypedContractEvent<
      DropFailedMessageEvent.InputTuple,
      DropFailedMessageEvent.OutputTuple,
      DropFailedMessageEvent.OutputObject
    >;
    DropFailedMessage: TypedContractEvent<
      DropFailedMessageEvent.InputTuple,
      DropFailedMessageEvent.OutputTuple,
      DropFailedMessageEvent.OutputObject
    >;

    "FallbackWithdraw(address,uint256)": TypedContractEvent<
      FallbackWithdrawEvent.InputTuple,
      FallbackWithdrawEvent.OutputTuple,
      FallbackWithdrawEvent.OutputObject
    >;
    FallbackWithdraw: TypedContractEvent<
      FallbackWithdrawEvent.InputTuple,
      FallbackWithdrawEvent.OutputTuple,
      FallbackWithdrawEvent.OutputObject
    >;

    "MessageFailed(uint16,bytes,uint64,bytes,bytes)": TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;
    MessageFailed: TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;

    "NonContractAddress(address)": TypedContractEvent<
      NonContractAddressEvent.InputTuple,
      NonContractAddressEvent.OutputTuple,
      NonContractAddressEvent.OutputObject
    >;
    NonContractAddress: TypedContractEvent<
      NonContractAddressEvent.InputTuple,
      NonContractAddressEvent.OutputTuple,
      NonContractAddressEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReceiveFromChain(uint16,address,uint256)": TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;
    ReceiveFromChain: TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;

    "RetryMessageSuccess(uint16,bytes,uint64,bytes32)": TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;
    RetryMessageSuccess: TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;

    "SendToChain(uint16,address,bytes32,uint256)": TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;
    SendToChain: TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;

    "SetDefaultFeeBp(uint16)": TypedContractEvent<
      SetDefaultFeeBpEvent.InputTuple,
      SetDefaultFeeBpEvent.OutputTuple,
      SetDefaultFeeBpEvent.OutputObject
    >;
    SetDefaultFeeBp: TypedContractEvent<
      SetDefaultFeeBpEvent.InputTuple,
      SetDefaultFeeBpEvent.OutputTuple,
      SetDefaultFeeBpEvent.OutputObject
    >;

    "SetFeeBp(uint16,bool,uint16)": TypedContractEvent<
      SetFeeBpEvent.InputTuple,
      SetFeeBpEvent.OutputTuple,
      SetFeeBpEvent.OutputObject
    >;
    SetFeeBp: TypedContractEvent<
      SetFeeBpEvent.InputTuple,
      SetFeeBpEvent.OutputTuple,
      SetFeeBpEvent.OutputObject
    >;

    "SetFeeOwner(address)": TypedContractEvent<
      SetFeeOwnerEvent.InputTuple,
      SetFeeOwnerEvent.OutputTuple,
      SetFeeOwnerEvent.OutputObject
    >;
    SetFeeOwner: TypedContractEvent<
      SetFeeOwnerEvent.InputTuple,
      SetFeeOwnerEvent.OutputTuple,
      SetFeeOwnerEvent.OutputObject
    >;

    "SetInboundCap(uint16,uint256)": TypedContractEvent<
      SetInboundCapEvent.InputTuple,
      SetInboundCapEvent.OutputTuple,
      SetInboundCapEvent.OutputObject
    >;
    SetInboundCap: TypedContractEvent<
      SetInboundCapEvent.InputTuple,
      SetInboundCapEvent.OutputTuple,
      SetInboundCapEvent.OutputObject
    >;

    "SetMinDstGas(uint16,uint16,uint256)": TypedContractEvent<
      SetMinDstGasEvent.InputTuple,
      SetMinDstGasEvent.OutputTuple,
      SetMinDstGasEvent.OutputObject
    >;
    SetMinDstGas: TypedContractEvent<
      SetMinDstGasEvent.InputTuple,
      SetMinDstGasEvent.OutputTuple,
      SetMinDstGasEvent.OutputObject
    >;

    "SetOperator(address)": TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;
    SetOperator: TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;

    "SetOutboundCap(uint16,uint256)": TypedContractEvent<
      SetOutboundCapEvent.InputTuple,
      SetOutboundCapEvent.OutputTuple,
      SetOutboundCapEvent.OutputObject
    >;
    SetOutboundCap: TypedContractEvent<
      SetOutboundCapEvent.InputTuple,
      SetOutboundCapEvent.OutputTuple,
      SetOutboundCapEvent.OutputObject
    >;

    "SetPrecrime(address)": TypedContractEvent<
      SetPrecrimeEvent.InputTuple,
      SetPrecrimeEvent.OutputTuple,
      SetPrecrimeEvent.OutputObject
    >;
    SetPrecrime: TypedContractEvent<
      SetPrecrimeEvent.InputTuple,
      SetPrecrimeEvent.OutputTuple,
      SetPrecrimeEvent.OutputObject
    >;

    "SetTrustedRemote(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;
    SetTrustedRemote: TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;

    "SetTrustedRemoteAddress(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;
    SetTrustedRemoteAddress: TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;

    "SetUseCustomAdapterParams(bool)": TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;
    SetUseCustomAdapterParams: TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;

    "SetWhitelist(address,bool)": TypedContractEvent<
      SetWhitelistEvent.InputTuple,
      SetWhitelistEvent.OutputTuple,
      SetWhitelistEvent.OutputObject
    >;
    SetWhitelist: TypedContractEvent<
      SetWhitelistEvent.InputTuple,
      SetWhitelistEvent.OutputTuple,
      SetWhitelistEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
