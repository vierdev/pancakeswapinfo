/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace OracleLibrary {
  export type WeightedTickDataStruct = {
    tick: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
  };

  export type WeightedTickDataStructOutput = [number, BigNumber] & {
    tick: number;
    weight: BigNumber;
  };
}

export interface OracleTestInterface extends utils.Interface {
  functions: {
    "consult(address,uint32)": FunctionFragment;
    "getBlockStartingTickAndLiquidity(address)": FunctionFragment;
    "getChainedPrice(address[],int24[])": FunctionFragment;
    "getGasCostOfConsult(address,uint32)": FunctionFragment;
    "getGasCostOfGetQuoteAtTick(int24,uint128,address,address)": FunctionFragment;
    "getOldestObservationSecondsAgo(address)": FunctionFragment;
    "getQuoteAtTick(int24,uint128,address,address)": FunctionFragment;
    "getWeightedArithmeticMeanTick((int24,uint128)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "consult"
      | "getBlockStartingTickAndLiquidity"
      | "getChainedPrice"
      | "getGasCostOfConsult"
      | "getGasCostOfGetQuoteAtTick"
      | "getOldestObservationSecondsAgo"
      | "getQuoteAtTick"
      | "getWeightedArithmeticMeanTick"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "consult",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockStartingTickAndLiquidity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainedPrice",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfConsult",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetQuoteAtTick",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOldestObservationSecondsAgo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAtTick",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightedArithmeticMeanTick",
    values: [OracleLibrary.WeightedTickDataStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockStartingTickAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfConsult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOldestObservationSecondsAgo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeightedArithmeticMeanTick",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OracleTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    consult(
      pool: PromiseOrValue<string>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
      }
    >;

    getBlockStartingTickAndLiquidity(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getChainedPrice(
      tokens: PromiseOrValue<string>[],
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { syntheticTick: BigNumber }>;

    getGasCostOfConsult(
      pool: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGasCostOfGetQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOldestObservationSecondsAgo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { secondsAgo: number; currentTimestamp: number }
    >;

    getQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<[number] & { arithmeticMeanWeightedTick: number }>;
  };

  consult(
    pool: PromiseOrValue<string>,
    secondsAgo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & {
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
    }
  >;

  getBlockStartingTickAndLiquidity(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber]>;

  getChainedPrice(
    tokens: PromiseOrValue<string>[],
    ticks: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostOfConsult(
    pool: PromiseOrValue<string>,
    period: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostOfGetQuoteAtTick(
    tick: PromiseOrValue<BigNumberish>,
    baseAmount: PromiseOrValue<BigNumberish>,
    baseToken: PromiseOrValue<string>,
    quoteToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOldestObservationSecondsAgo(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { secondsAgo: number; currentTimestamp: number }
  >;

  getQuoteAtTick(
    tick: PromiseOrValue<BigNumberish>,
    baseAmount: PromiseOrValue<BigNumberish>,
    baseToken: PromiseOrValue<string>,
    quoteToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWeightedArithmeticMeanTick(
    observations: OracleLibrary.WeightedTickDataStruct[],
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    consult(
      pool: PromiseOrValue<string>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
      }
    >;

    getBlockStartingTickAndLiquidity(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getChainedPrice(
      tokens: PromiseOrValue<string>[],
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfConsult(
      pool: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldestObservationSecondsAgo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { secondsAgo: number; currentTimestamp: number }
    >;

    getQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    consult(
      pool: PromiseOrValue<string>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockStartingTickAndLiquidity(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainedPrice(
      tokens: PromiseOrValue<string>[],
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfConsult(
      pool: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldestObservationSecondsAgo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consult(
      pool: PromiseOrValue<string>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockStartingTickAndLiquidity(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainedPrice(
      tokens: PromiseOrValue<string>[],
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfConsult(
      pool: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfGetQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOldestObservationSecondsAgo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteAtTick(
      tick: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      baseToken: PromiseOrValue<string>,
      quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
